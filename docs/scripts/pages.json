[{"name":"DEBUG","description":"lexi.LogLevel.DEBUG","location":"lexi-api/lexi/-log-level/-d-e-b-u-g/index.html","searchKeys":["DEBUG","DEBUG","lexi.LogLevel.DEBUG"]},{"name":"DEBUG","description":"logging.LogLevel.DEBUG","location":"lexi-api/logging/-log-level/-d-e-b-u-g/index.html","searchKeys":["DEBUG","DEBUG","logging.LogLevel.DEBUG"]},{"name":"ERROR","description":"lexi.LogLevel.ERROR","location":"lexi-api/lexi/-log-level/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","lexi.LogLevel.ERROR"]},{"name":"ERROR","description":"logging.LogLevel.ERROR","location":"lexi-api/logging/-log-level/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","logging.LogLevel.ERROR"]},{"name":"FAILURE","description":"lexi.LogLevel.FAILURE","location":"lexi-api/lexi/-log-level/-f-a-i-l-u-r-e/index.html","searchKeys":["FAILURE","FAILURE","lexi.LogLevel.FAILURE"]},{"name":"FAILURE","description":"logging.LogLevel.FAILURE","location":"lexi-api/logging/-log-level/-f-a-i-l-u-r-e/index.html","searchKeys":["FAILURE","FAILURE","logging.LogLevel.FAILURE"]},{"name":"INFO","description":"lexi.LogLevel.INFO","location":"lexi-api/lexi/-log-level/-i-n-f-o/index.html","searchKeys":["INFO","INFO","lexi.LogLevel.INFO"]},{"name":"INFO","description":"logging.LogLevel.INFO","location":"lexi-api/logging/-log-level/-i-n-f-o/index.html","searchKeys":["INFO","INFO","logging.LogLevel.INFO"]},{"name":"WARNING","description":"lexi.LogLevel.WARNING","location":"lexi-api/lexi/-log-level/-w-a-r-n-i-n-g/index.html","searchKeys":["WARNING","WARNING","lexi.LogLevel.WARNING"]},{"name":"WARNING","description":"logging.LogLevel.WARNING","location":"lexi-api/logging/-log-level/-w-a-r-n-i-n-g/index.html","searchKeys":["WARNING","WARNING","logging.LogLevel.WARNING"]},{"name":"abstract fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Appender.append","location":"lexi-api/lexi/-appender/append.html","searchKeys":["append","abstract fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","lexi.Appender.append"]},{"name":"abstract fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"logging.Appender.append","location":"lexi-api/logging/-appender/append.html","searchKeys":["append","abstract fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","logging.Appender.append"]},{"name":"abstract fun append(vararg o: Any?)","description":"lexi.Appender.append","location":"lexi-api/lexi/-appender/append.html","searchKeys":["append","abstract fun append(vararg o: Any?)","lexi.Appender.append"]},{"name":"abstract fun append(vararg o: Any?)","description":"logging.Appender.append","location":"lexi-api/logging/-appender/append.html","searchKeys":["append","abstract fun append(vararg o: Any?)","logging.Appender.append"]},{"name":"abstract fun print(msg: String? = null)","description":"lexi.PrintStream.print","location":"lexi-api/lexi/-print-stream/print.html","searchKeys":["print","abstract fun print(msg: String? = null)","lexi.PrintStream.print"]},{"name":"abstract fun println(msg: String? = null)","description":"lexi.PrintStream.println","location":"lexi-api/lexi/-print-stream/println.html","searchKeys":["println","abstract fun println(msg: String? = null)","lexi.PrintStream.println"]},{"name":"class Logger(appenders: Appender) : Appender","description":"lexi.Logger","location":"lexi-api/lexi/-logger/index.html","searchKeys":["Logger","class Logger(appenders: Appender) : Appender","lexi.Logger"]},{"name":"class Logger(appenders: Appender) : Appender","description":"logging.Logger","location":"lexi-api/logging/-logger/index.html","searchKeys":["Logger","class Logger(appenders: Appender) : Appender","logging.Logger"]},{"name":"constructor(level: LogLevel, message: String, metadata: Map<String, Any>)","description":"lexi.Log.Log","location":"lexi-api/lexi/-log/-log.html","searchKeys":["Log","constructor(level: LogLevel, message: String, metadata: Map<String, Any>)","lexi.Log.Log"]},{"name":"constructor(level: LogLevel, message: String, metadata: Map<String, Any>)","description":"logging.Log.Log","location":"lexi-api/logging/-log/-log.html","searchKeys":["Log","constructor(level: LogLevel, message: String, metadata: Map<String, Any>)","logging.Log.Log"]},{"name":"constructor(vararg appenders: Appender)","description":"lexi.Logger.Logger","location":"lexi-api/lexi/-logger/-logger.html","searchKeys":["Logger","constructor(vararg appenders: Appender)","lexi.Logger.Logger"]},{"name":"constructor(vararg appenders: Appender)","description":"logging.Logger.Logger","location":"lexi-api/logging/-logger/-logger.html","searchKeys":["Logger","constructor(vararg appenders: Appender)","logging.Logger.Logger"]},{"name":"data class Log(val level: LogLevel, val message: String, val metadata: Map<String, Any>)","description":"lexi.Log","location":"lexi-api/lexi/-log/index.html","searchKeys":["Log","data class Log(val level: LogLevel, val message: String, val metadata: Map<String, Any>)","lexi.Log"]},{"name":"data class Log(val level: LogLevel, val message: String, val metadata: Map<String, Any>)","description":"logging.Log","location":"lexi-api/logging/-log/index.html","searchKeys":["Log","data class Log(val level: LogLevel, val message: String, val metadata: Map<String, Any>)","logging.Log"]},{"name":"enum LogLevel : Enum<LogLevel> ","description":"lexi.LogLevel","location":"lexi-api/lexi/-log-level/index.html","searchKeys":["LogLevel","enum LogLevel : Enum<LogLevel> ","lexi.LogLevel"]},{"name":"enum LogLevel : Enum<LogLevel> ","description":"logging.LogLevel","location":"lexi-api/logging/-log-level/index.html","searchKeys":["LogLevel","enum LogLevel : Enum<LogLevel> ","logging.LogLevel"]},{"name":"fun valueOf(value: String): LogLevel","description":"lexi.LogLevel.valueOf","location":"lexi-api/lexi/-log-level/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LogLevel","lexi.LogLevel.valueOf"]},{"name":"fun valueOf(value: String): LogLevel","description":"logging.LogLevel.valueOf","location":"lexi-api/logging/-log-level/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LogLevel","logging.LogLevel.valueOf"]},{"name":"fun values(): Array<LogLevel>","description":"lexi.LogLevel.values","location":"lexi-api/lexi/-log-level/values.html","searchKeys":["values","fun values(): Array<LogLevel>","lexi.LogLevel.values"]},{"name":"fun values(): Array<LogLevel>","description":"logging.LogLevel.values","location":"lexi-api/logging/-log-level/values.html","searchKeys":["values","fun values(): Array<LogLevel>","logging.LogLevel.values"]},{"name":"fun with(map: Map<String, Any?>): Logger","description":"lexi.Logger.with","location":"lexi-api/lexi/-logger/with.html","searchKeys":["with","fun with(map: Map<String, Any?>): Logger","lexi.Logger.with"]},{"name":"fun with(map: Map<String, Any?>): Logger","description":"logging.Logger.with","location":"lexi-api/logging/-logger/with.html","searchKeys":["with","fun with(map: Map<String, Any?>): Logger","logging.Logger.with"]},{"name":"fun with(vararg data: Pair<String, Any?>): Logger","description":"lexi.Logger.with","location":"lexi-api/lexi/-logger/with.html","searchKeys":["with","fun with(vararg data: Pair<String, Any?>): Logger","lexi.Logger.with"]},{"name":"fun with(vararg data: Pair<String, Any?>): Logger","description":"logging.Logger.with","location":"lexi-api/logging/-logger/with.html","searchKeys":["with","fun with(vararg data: Pair<String, Any?>): Logger","logging.Logger.with"]},{"name":"interface Appender","description":"lexi.Appender","location":"lexi-api/lexi/-appender/index.html","searchKeys":["Appender","interface Appender","lexi.Appender"]},{"name":"interface Appender","description":"logging.Appender","location":"lexi-api/logging/-appender/index.html","searchKeys":["Appender","interface Appender","logging.Appender"]},{"name":"interface PrintStream","description":"lexi.PrintStream","location":"lexi-api/lexi/-print-stream/index.html","searchKeys":["PrintStream","interface PrintStream","lexi.PrintStream"]},{"name":"open fun debug(msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Appender.debug","location":"lexi-api/lexi/-appender/debug.html","searchKeys":["debug","open fun debug(msg: String, vararg data: Pair<String, Any?>)","lexi.Appender.debug"]},{"name":"open fun debug(msg: String, vararg data: Pair<String, Any?>)","description":"logging.Appender.debug","location":"lexi-api/logging/-appender/debug.html","searchKeys":["debug","open fun debug(msg: String, vararg data: Pair<String, Any?>)","logging.Appender.debug"]},{"name":"open fun error(c: Throwable?)","description":"lexi.Appender.error","location":"lexi-api/lexi/-appender/error.html","searchKeys":["error","open fun error(c: Throwable?)","lexi.Appender.error"]},{"name":"open fun error(c: Throwable?)","description":"logging.Appender.error","location":"lexi-api/logging/-appender/error.html","searchKeys":["error","open fun error(c: Throwable?)","logging.Appender.error"]},{"name":"open fun error(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","description":"lexi.Appender.error","location":"lexi-api/lexi/-appender/error.html","searchKeys":["error","open fun error(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","lexi.Appender.error"]},{"name":"open fun error(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","description":"logging.Appender.error","location":"lexi-api/logging/-appender/error.html","searchKeys":["error","open fun error(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","logging.Appender.error"]},{"name":"open fun error(msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Appender.error","location":"lexi-api/lexi/-appender/error.html","searchKeys":["error","open fun error(msg: String, vararg data: Pair<String, Any?>)","lexi.Appender.error"]},{"name":"open fun error(msg: String, vararg data: Pair<String, Any?>)","description":"logging.Appender.error","location":"lexi-api/logging/-appender/error.html","searchKeys":["error","open fun error(msg: String, vararg data: Pair<String, Any?>)","logging.Appender.error"]},{"name":"open fun failure(c: Throwable?)","description":"lexi.Appender.failure","location":"lexi-api/lexi/-appender/failure.html","searchKeys":["failure","open fun failure(c: Throwable?)","lexi.Appender.failure"]},{"name":"open fun failure(c: Throwable?)","description":"logging.Appender.failure","location":"lexi-api/logging/-appender/failure.html","searchKeys":["failure","open fun failure(c: Throwable?)","logging.Appender.failure"]},{"name":"open fun failure(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","description":"lexi.Appender.failure","location":"lexi-api/lexi/-appender/failure.html","searchKeys":["failure","open fun failure(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","lexi.Appender.failure"]},{"name":"open fun failure(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","description":"logging.Appender.failure","location":"lexi-api/logging/-appender/failure.html","searchKeys":["failure","open fun failure(msg: String, c: Throwable?, vararg data: Pair<String, Any?>)","logging.Appender.failure"]},{"name":"open fun failure(msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Appender.failure","location":"lexi-api/lexi/-appender/failure.html","searchKeys":["failure","open fun failure(msg: String, vararg data: Pair<String, Any?>)","lexi.Appender.failure"]},{"name":"open fun failure(msg: String, vararg data: Pair<String, Any?>)","description":"logging.Appender.failure","location":"lexi-api/logging/-appender/failure.html","searchKeys":["failure","open fun failure(msg: String, vararg data: Pair<String, Any?>)","logging.Appender.failure"]},{"name":"open fun info(msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Appender.info","location":"lexi-api/lexi/-appender/info.html","searchKeys":["info","open fun info(msg: String, vararg data: Pair<String, Any?>)","lexi.Appender.info"]},{"name":"open fun info(msg: String, vararg data: Pair<String, Any?>)","description":"logging.Appender.info","location":"lexi-api/logging/-appender/info.html","searchKeys":["info","open fun info(msg: String, vararg data: Pair<String, Any?>)","logging.Appender.info"]},{"name":"open fun log(msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Appender.log","location":"lexi-api/lexi/-appender/log.html","searchKeys":["log","open fun log(msg: String, vararg data: Pair<String, Any?>)","lexi.Appender.log"]},{"name":"open fun log(msg: String, vararg data: Pair<String, Any?>)","description":"logging.Appender.log","location":"lexi-api/logging/-appender/log.html","searchKeys":["log","open fun log(msg: String, vararg data: Pair<String, Any?>)","logging.Appender.log"]},{"name":"open fun log(vararg o: Any?)","description":"lexi.Appender.log","location":"lexi-api/lexi/-appender/log.html","searchKeys":["log","open fun log(vararg o: Any?)","lexi.Appender.log"]},{"name":"open fun log(vararg o: Any?)","description":"logging.Appender.log","location":"lexi-api/logging/-appender/log.html","searchKeys":["log","open fun log(vararg o: Any?)","logging.Appender.log"]},{"name":"open fun obj(vararg obj: Any?)","description":"lexi.Appender.obj","location":"lexi-api/lexi/-appender/obj.html","searchKeys":["obj","open fun obj(vararg obj: Any?)","lexi.Appender.obj"]},{"name":"open fun obj(vararg obj: Any?)","description":"logging.Appender.obj","location":"lexi-api/logging/-appender/obj.html","searchKeys":["obj","open fun obj(vararg obj: Any?)","logging.Appender.obj"]},{"name":"open fun warn(msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Appender.warn","location":"lexi-api/lexi/-appender/warn.html","searchKeys":["warn","open fun warn(msg: String, vararg data: Pair<String, Any?>)","lexi.Appender.warn"]},{"name":"open fun warn(msg: String, vararg data: Pair<String, Any?>)","description":"logging.Appender.warn","location":"lexi-api/logging/-appender/warn.html","searchKeys":["warn","open fun warn(msg: String, vararg data: Pair<String, Any?>)","logging.Appender.warn"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"lexi.Logger.append","location":"lexi-api/lexi/-logger/append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","lexi.Logger.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"logging.Logger.append","location":"lexi-api/logging/-logger/append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","logging.Logger.append"]},{"name":"open override fun append(vararg o: Any?)","description":"lexi.Logger.append","location":"lexi-api/lexi/-logger/append.html","searchKeys":["append","open override fun append(vararg o: Any?)","lexi.Logger.append"]},{"name":"open override fun append(vararg o: Any?)","description":"logging.Logger.append","location":"lexi-api/logging/-logger/append.html","searchKeys":["append","open override fun append(vararg o: Any?)","logging.Logger.append"]},{"name":"val level: LogLevel","description":"lexi.Log.level","location":"lexi-api/lexi/-log/level.html","searchKeys":["level","val level: LogLevel","lexi.Log.level"]},{"name":"val level: LogLevel","description":"logging.Log.level","location":"lexi-api/logging/-log/level.html","searchKeys":["level","val level: LogLevel","logging.Log.level"]},{"name":"val message: String","description":"lexi.Log.message","location":"lexi-api/lexi/-log/message.html","searchKeys":["message","val message: String","lexi.Log.message"]},{"name":"val message: String","description":"logging.Log.message","location":"lexi-api/logging/-log/message.html","searchKeys":["message","val message: String","logging.Log.message"]},{"name":"val metadata: Map<String, Any>","description":"lexi.Log.metadata","location":"lexi-api/lexi/-log/metadata.html","searchKeys":["metadata","val metadata: Map<String, Any>","lexi.Log.metadata"]},{"name":"val metadata: Map<String, Any>","description":"logging.Log.metadata","location":"lexi-api/logging/-log/metadata.html","searchKeys":["metadata","val metadata: Map<String, Any>","logging.Log.metadata"]},{"name":"val source: Any?","description":"lexi.Log.source","location":"lexi-api/lexi/-log/source.html","searchKeys":["source","val source: Any?","lexi.Log.source"]},{"name":"val source: Any?","description":"logging.Log.source","location":"lexi-api/logging/-log/source.html","searchKeys":["source","val source: Any?","logging.Log.source"]},{"name":"class Log","description":"android.util.Log","location":"lexi-test-android/android.util/-log/index.html","searchKeys":["Log","class Log","android.util.Log"]},{"name":"constructor()","description":"android.util.Log.Log","location":"lexi-test-android/android.util/-log/-log.html","searchKeys":["Log","constructor()","android.util.Log.Log"]},{"name":"fun d(tag: String, msg: String): Int","description":"android.util.Log.Companion.d","location":"lexi-test-android/android.util/-log/-companion/d.html","searchKeys":["d","fun d(tag: String, msg: String): Int","android.util.Log.Companion.d"]},{"name":"fun e(tag: String, msg: String): Int","description":"android.util.Log.Companion.e","location":"lexi-test-android/android.util/-log/-companion/e.html","searchKeys":["e","fun e(tag: String, msg: String): Int","android.util.Log.Companion.e"]},{"name":"fun i(tag: String, msg: String): Int","description":"android.util.Log.Companion.i","location":"lexi-test-android/android.util/-log/-companion/i.html","searchKeys":["i","fun i(tag: String, msg: String): Int","android.util.Log.Companion.i"]},{"name":"fun w(tag: String, msg: String): Int","description":"android.util.Log.Companion.w","location":"lexi-test-android/android.util/-log/-companion/w.html","searchKeys":["w","fun w(tag: String, msg: String): Int","android.util.Log.Companion.w"]},{"name":"fun wtf(tag: String, msg: String): Int","description":"android.util.Log.Companion.wtf","location":"lexi-test-android/android.util/-log/-companion/wtf.html","searchKeys":["wtf","fun wtf(tag: String, msg: String): Int","android.util.Log.Companion.wtf"]},{"name":"object Companion","description":"android.util.Log.Companion","location":"lexi-test-android/android.util/-log/-companion/index.html","searchKeys":["Companion","object Companion","android.util.Log.Companion"]},{"name":"abstract fun toBeEmpty()","description":"expect.CollectionExpectation.toBeEmpty","location":"kommander-core/expect/-collection-expectation/to-be-empty.html","searchKeys":["toBeEmpty","abstract fun toBeEmpty()","expect.CollectionExpectation.toBeEmpty"]},{"name":"abstract fun toBeEmpty()","description":"kommander.ExpectCollection.toBeEmpty","location":"kommander-core/kommander/-expect-collection/to-be-empty.html","searchKeys":["toBeEmpty","abstract fun toBeEmpty()","kommander.ExpectCollection.toBeEmpty"]},{"name":"abstract fun toBeOfSize(size: Int)","description":"expect.CollectionExpectation.toBeOfSize","location":"kommander-core/expect/-collection-expectation/to-be-of-size.html","searchKeys":["toBeOfSize","abstract fun toBeOfSize(size: Int)","expect.CollectionExpectation.toBeOfSize"]},{"name":"abstract fun toBeOfSize(size: Int)","description":"kommander.ExpectCollection.toBeOfSize","location":"kommander-core/kommander/-expect-collection/to-be-of-size.html","searchKeys":["toBeOfSize","abstract fun toBeOfSize(size: Int)","kommander.ExpectCollection.toBeOfSize"]},{"name":"abstract fun toContain(vararg elements: E?)","description":"expect.CollectionExpectation.toContain","location":"kommander-core/expect/-collection-expectation/to-contain.html","searchKeys":["toContain","abstract fun toContain(vararg elements: E?)","expect.CollectionExpectation.toContain"]},{"name":"abstract fun toContain(vararg elements: E?)","description":"kommander.ExpectCollection.toContain","location":"kommander-core/kommander/-expect-collection/to-contain.html","searchKeys":["toContain","abstract fun toContain(vararg elements: E?)","kommander.ExpectCollection.toContain"]},{"name":"abstract fun toContainElements()","description":"expect.CollectionExpectation.toContainElements","location":"kommander-core/expect/-collection-expectation/to-contain-elements.html","searchKeys":["toContainElements","abstract fun toContainElements()","expect.CollectionExpectation.toContainElements"]},{"name":"abstract fun toContainElements()","description":"kommander.ExpectCollection.toContainElements","location":"kommander-core/kommander/-expect-collection/to-contain-elements.html","searchKeys":["toContainElements","abstract fun toContainElements()","kommander.ExpectCollection.toContainElements"]},{"name":"abstract fun toFail(): Throwable","description":"expect.LambdaExpectation.toFail","location":"kommander-core/expect/-lambda-expectation/to-fail.html","searchKeys":["toFail","abstract fun toFail(): Throwable","expect.LambdaExpectation.toFail"]},{"name":"abstract fun toFail(): Throwable","description":"kommander.ExpectLambda.toFail","location":"kommander-core/kommander/-expect-lambda/to-fail.html","searchKeys":["toFail","abstract fun toFail(): Throwable","kommander.ExpectLambda.toFail"]},{"name":"abstract fun toHave(length: Int)","description":"expect.CollectionExpectation.toHave","location":"kommander-core/expect/-collection-expectation/to-have.html","searchKeys":["toHave","abstract fun toHave(length: Int)","expect.CollectionExpectation.toHave"]},{"name":"abstract fun toHave(length: Int)","description":"kommander.ExpectCollection.toHave","location":"kommander-core/kommander/-expect-collection/to-have.html","searchKeys":["toHave","abstract fun toHave(length: Int)","kommander.ExpectCollection.toHave"]},{"name":"abstract fun toNotContain(vararg elements: E?)","description":"expect.CollectionExpectation.toNotContain","location":"kommander-core/expect/-collection-expectation/to-not-contain.html","searchKeys":["toNotContain","abstract fun toNotContain(vararg elements: E?)","expect.CollectionExpectation.toNotContain"]},{"name":"abstract fun toNotContain(vararg elements: E?)","description":"kommander.ExpectCollection.toNotContain","location":"kommander-core/kommander/-expect-collection/to-not-contain.html","searchKeys":["toNotContain","abstract fun toNotContain(vararg elements: E?)","kommander.ExpectCollection.toNotContain"]},{"name":"abstract fun toPass()","description":"expect.LambdaExpectation.toPass","location":"kommander-core/expect/-lambda-expectation/to-pass.html","searchKeys":["toPass","abstract fun toPass()","expect.LambdaExpectation.toPass"]},{"name":"abstract fun toPass()","description":"kommander.ExpectLambda.toPass","location":"kommander-core/kommander/-expect-lambda/to-pass.html","searchKeys":["toPass","abstract fun toPass()","kommander.ExpectLambda.toPass"]},{"name":"class BasicExpectationImpl<E>(val value: E) : BasicExpectation<E> ","description":"expect.internal.BasicExpectationImpl","location":"kommander-core/expect.internal/-basic-expectation-impl/index.html","searchKeys":["BasicExpectationImpl","class BasicExpectationImpl<E>(val value: E) : BasicExpectation<E> ","expect.internal.BasicExpectationImpl"]},{"name":"class ExpectImpl<E>(val value: E) : Expect<E> ","description":"kommander.internal.ExpectImpl","location":"kommander-core/kommander.internal/-expect-impl/index.html","searchKeys":["ExpectImpl","class ExpectImpl<E>(val value: E) : Expect<E> ","kommander.internal.ExpectImpl"]},{"name":"constructor(value: E)","description":"expect.internal.BasicExpectationImpl.BasicExpectationImpl","location":"kommander-core/expect.internal/-basic-expectation-impl/-basic-expectation-impl.html","searchKeys":["BasicExpectationImpl","constructor(value: E)","expect.internal.BasicExpectationImpl.BasicExpectationImpl"]},{"name":"constructor(value: E)","description":"kommander.internal.ExpectImpl.ExpectImpl","location":"kommander-core/kommander.internal/-expect-impl/-expect-impl.html","searchKeys":["ExpectImpl","constructor(value: E)","kommander.internal.ExpectImpl.ExpectImpl"]},{"name":"expect abstract fun toBe(expected: E)","description":"expect.BasicExpectation.toBe","location":"kommander-core/expect/-basic-expectation/to-be.html","searchKeys":["toBe","expect abstract fun toBe(expected: E)","expect.BasicExpectation.toBe"]},{"name":"expect abstract fun toBe(expected: E)","description":"kommander.Expect.toBe","location":"kommander-core/kommander/-expect/to-be.html","searchKeys":["toBe","expect abstract fun toBe(expected: E)","kommander.Expect.toBe"]},{"name":"expect abstract fun toBe(expected: E, message: String)","description":"expect.BasicExpectation.toBe","location":"kommander-core/expect/-basic-expectation/to-be.html","searchKeys":["toBe","expect abstract fun toBe(expected: E, message: String)","expect.BasicExpectation.toBe"]},{"name":"expect abstract fun toBe(expected: E, message: String)","description":"kommander.Expect.toBe","location":"kommander-core/kommander/-expect/to-be.html","searchKeys":["toBe","expect abstract fun toBe(expected: E, message: String)","kommander.Expect.toBe"]},{"name":"expect abstract fun toBeNonNull()","description":"expect.BasicExpectation.toBeNonNull","location":"kommander-core/expect/-basic-expectation/to-be-non-null.html","searchKeys":["toBeNonNull","expect abstract fun toBeNonNull()","expect.BasicExpectation.toBeNonNull"]},{"name":"expect abstract fun toBeNonNull()","description":"kommander.Expect.toBeNonNull","location":"kommander-core/kommander/-expect/to-be-non-null.html","searchKeys":["toBeNonNull","expect abstract fun toBeNonNull()","kommander.Expect.toBeNonNull"]},{"name":"expect abstract fun toBeNonNull(message: String)","description":"expect.BasicExpectation.toBeNonNull","location":"kommander-core/expect/-basic-expectation/to-be-non-null.html","searchKeys":["toBeNonNull","expect abstract fun toBeNonNull(message: String)","expect.BasicExpectation.toBeNonNull"]},{"name":"expect abstract fun toBeNonNull(message: String)","description":"kommander.Expect.toBeNonNull","location":"kommander-core/kommander/-expect/to-be-non-null.html","searchKeys":["toBeNonNull","expect abstract fun toBeNonNull(message: String)","kommander.Expect.toBeNonNull"]},{"name":"expect abstract fun toBeNull()","description":"expect.BasicExpectation.toBeNull","location":"kommander-core/expect/-basic-expectation/to-be-null.html","searchKeys":["toBeNull","expect abstract fun toBeNull()","expect.BasicExpectation.toBeNull"]},{"name":"expect abstract fun toBeNull()","description":"kommander.Expect.toBeNull","location":"kommander-core/kommander/-expect/to-be-null.html","searchKeys":["toBeNull","expect abstract fun toBeNull()","kommander.Expect.toBeNull"]},{"name":"expect abstract fun toBeNull(message: String)","description":"expect.BasicExpectation.toBeNull","location":"kommander-core/expect/-basic-expectation/to-be-null.html","searchKeys":["toBeNull","expect abstract fun toBeNull(message: String)","expect.BasicExpectation.toBeNull"]},{"name":"expect abstract fun toBeNull(message: String)","description":"kommander.Expect.toBeNull","location":"kommander-core/kommander/-expect/to-be-null.html","searchKeys":["toBeNull","expect abstract fun toBeNull(message: String)","kommander.Expect.toBeNull"]},{"name":"expect abstract val value: E","description":"expect.BasicExpectation.value","location":"kommander-core/expect/-basic-expectation/value.html","searchKeys":["value","expect abstract val value: E","expect.BasicExpectation.value"]},{"name":"expect abstract val value: E","description":"kommander.Expect.value","location":"kommander-core/kommander/-expect/value.html","searchKeys":["value","expect abstract val value: E","kommander.Expect.value"]},{"name":"expect annotation class JsIgnore","description":"expect.JsIgnore","location":"kommander-core/expect/-js-ignore/index.html","searchKeys":["JsIgnore","expect annotation class JsIgnore","expect.JsIgnore"]},{"name":"expect annotation class JsIgnore","description":"kommander.JsIgnore","location":"kommander-core/kommander/-js-ignore/index.html","searchKeys":["JsIgnore","expect annotation class JsIgnore","kommander.JsIgnore"]},{"name":"expect annotation class NativeIgnore","description":"expect.NativeIgnore","location":"kommander-core/expect/-native-ignore/index.html","searchKeys":["NativeIgnore","expect annotation class NativeIgnore","expect.NativeIgnore"]},{"name":"expect annotation class NativeIgnore","description":"kommander.NativeIgnore","location":"kommander-core/kommander/-native-ignore/index.html","searchKeys":["NativeIgnore","expect annotation class NativeIgnore","kommander.NativeIgnore"]},{"name":"expect interface BasicExpectation<out E>","description":"expect.BasicExpectation","location":"kommander-core/expect/-basic-expectation/index.html","searchKeys":["BasicExpectation","expect interface BasicExpectation<out E>","expect.BasicExpectation"]},{"name":"expect interface Expect<out E>","description":"kommander.Expect","location":"kommander-core/kommander/-expect/index.html","searchKeys":["Expect","expect interface Expect<out E>","kommander.Expect"]},{"name":"external fun <T> require(module: String): T","description":"expect.require","location":"kommander-core/expect/require.html","searchKeys":["require","external fun <T> require(module: String): T","expect.require"]},{"name":"external fun <T> require(module: String): T","description":"kommander.require","location":"kommander-core/kommander/require.html","searchKeys":["require","external fun <T> require(module: String): T","kommander.require"]},{"name":"fun <E> expect(collection: Collection<E>?): CollectionExpectation<E>","description":"expect.expect","location":"kommander-core/expect/expect.html","searchKeys":["expect","fun <E> expect(collection: Collection<E>?): CollectionExpectation<E>","expect.expect"]},{"name":"fun <E> expect(collection: Collection<E>?): ExpectCollection<E>","description":"kommander.expect","location":"kommander-core/kommander/expect.html","searchKeys":["expect","fun <E> expect(collection: Collection<E>?): ExpectCollection<E>","kommander.expect"]},{"name":"fun <E> expect(value: E): BasicExpectation<E>","description":"expect.ExpectBuilders.expect","location":"kommander-core/expect/-expect-builders/expect.html","searchKeys":["expect","fun <E> expect(value: E): BasicExpectation<E>","expect.ExpectBuilders.expect"]},{"name":"fun <E> expect(value: E): BasicExpectation<E>","description":"expect.expect","location":"kommander-core/expect/expect.html","searchKeys":["expect","fun <E> expect(value: E): BasicExpectation<E>","expect.expect"]},{"name":"fun <E> expect(value: E): Expect<E>","description":"kommander.ExpectBuilders.expect","location":"kommander-core/kommander/-expect-builders/expect.html","searchKeys":["expect","fun <E> expect(value: E): Expect<E>","kommander.ExpectBuilders.expect"]},{"name":"fun <E> expect(value: E): Expect<E>","description":"kommander.expect","location":"kommander-core/kommander/expect.html","searchKeys":["expect","fun <E> expect(value: E): Expect<E>","kommander.expect"]},{"name":"fun <E> expect(vararg value: E): CollectionExpectation<E>","description":"expect.ExpectBuilders.expect","location":"kommander-core/expect/-expect-builders/expect.html","searchKeys":["expect","fun <E> expect(vararg value: E): CollectionExpectation<E>","expect.ExpectBuilders.expect"]},{"name":"fun <E> expect(vararg value: E): CollectionExpectation<E>","description":"expect.expect","location":"kommander-core/expect/expect.html","searchKeys":["expect","fun <E> expect(vararg value: E): CollectionExpectation<E>","expect.expect"]},{"name":"fun <E> expect(vararg value: E): ExpectCollection<E>","description":"kommander.ExpectBuilders.expect","location":"kommander-core/kommander/-expect-builders/expect.html","searchKeys":["expect","fun <E> expect(vararg value: E): ExpectCollection<E>","kommander.ExpectBuilders.expect"]},{"name":"fun <E> expect(vararg value: E): ExpectCollection<E>","description":"kommander.expect","location":"kommander-core/kommander/expect.html","searchKeys":["expect","fun <E> expect(vararg value: E): ExpectCollection<E>","kommander.expect"]},{"name":"fun <E> expectArray(array: Array<E>): CollectionExpectation<E>","description":"expect.ExpectBuilders.expectArray","location":"kommander-core/expect/-expect-builders/expect-array.html","searchKeys":["expectArray","fun <E> expectArray(array: Array<E>): CollectionExpectation<E>","expect.ExpectBuilders.expectArray"]},{"name":"fun <E> expectArray(array: Array<E>): CollectionExpectation<E>","description":"expect.expectArray","location":"kommander-core/expect/expect-array.html","searchKeys":["expectArray","fun <E> expectArray(array: Array<E>): CollectionExpectation<E>","expect.expectArray"]},{"name":"fun <E> expectArray(array: Array<E>): ExpectCollection<E>","description":"kommander.ExpectBuilders.expectArray","location":"kommander-core/kommander/-expect-builders/expect-array.html","searchKeys":["expectArray","fun <E> expectArray(array: Array<E>): ExpectCollection<E>","kommander.ExpectBuilders.expectArray"]},{"name":"fun <E> expectArray(array: Array<E>): ExpectCollection<E>","description":"kommander.expectArray","location":"kommander-core/kommander/expect-array.html","searchKeys":["expectArray","fun <E> expectArray(array: Array<E>): ExpectCollection<E>","kommander.expectArray"]},{"name":"fun <E> expectCollection(collection: Collection<E>): CollectionExpectation<E>","description":"expect.ExpectBuilders.expectCollection","location":"kommander-core/expect/-expect-builders/expect-collection.html","searchKeys":["expectCollection","fun <E> expectCollection(collection: Collection<E>): CollectionExpectation<E>","expect.ExpectBuilders.expectCollection"]},{"name":"fun <E> expectCollection(collection: Collection<E>): ExpectCollection<E>","description":"kommander.ExpectBuilders.expectCollection","location":"kommander-core/kommander/-expect-builders/expect-collection.html","searchKeys":["expectCollection","fun <E> expectCollection(collection: Collection<E>): ExpectCollection<E>","kommander.ExpectBuilders.expectCollection"]},{"name":"fun <E> expectCollection(collection: Collection<E>?): CollectionExpectation<E>","description":"expect.expectCollection","location":"kommander-core/expect/expect-collection.html","searchKeys":["expectCollection","fun <E> expectCollection(collection: Collection<E>?): CollectionExpectation<E>","expect.expectCollection"]},{"name":"fun <E> expectCollection(collection: Collection<E>?): ExpectCollection<E>","description":"kommander.expectCollection","location":"kommander-core/kommander/expect-collection.html","searchKeys":["expectCollection","fun <E> expectCollection(collection: Collection<E>?): ExpectCollection<E>","kommander.expectCollection"]},{"name":"fun <T : Comparable<T>> BasicExpectation<T>.toBeGreaterThan(expected: T)","description":"expect.toBeGreaterThan","location":"kommander-core/expect/to-be-greater-than.html","searchKeys":["toBeGreaterThan","fun <T : Comparable<T>> BasicExpectation<T>.toBeGreaterThan(expected: T)","expect.toBeGreaterThan"]},{"name":"fun <T : Comparable<T>> BasicExpectation<T>.toBeGreaterThanOrEqualTo(expected: T)","description":"expect.toBeGreaterThanOrEqualTo","location":"kommander-core/expect/to-be-greater-than-or-equal-to.html","searchKeys":["toBeGreaterThanOrEqualTo","fun <T : Comparable<T>> BasicExpectation<T>.toBeGreaterThanOrEqualTo(expected: T)","expect.toBeGreaterThanOrEqualTo"]},{"name":"fun <T : Comparable<T>> BasicExpectation<T>.toBeLessThan(expected: T)","description":"expect.toBeLessThan","location":"kommander-core/expect/to-be-less-than.html","searchKeys":["toBeLessThan","fun <T : Comparable<T>> BasicExpectation<T>.toBeLessThan(expected: T)","expect.toBeLessThan"]},{"name":"fun <T : Comparable<T>> BasicExpectation<T>.toBeLessThanOrEqualTo(expected: T)","description":"expect.toBeLessThanOrEqualTo","location":"kommander-core/expect/to-be-less-than-or-equal-to.html","searchKeys":["toBeLessThanOrEqualTo","fun <T : Comparable<T>> BasicExpectation<T>.toBeLessThanOrEqualTo(expected: T)","expect.toBeLessThanOrEqualTo"]},{"name":"fun <T : Comparable<T>> Expect<T>.toBeGreaterThan(expected: T)","description":"kommander.toBeGreaterThan","location":"kommander-core/kommander/to-be-greater-than.html","searchKeys":["toBeGreaterThan","fun <T : Comparable<T>> Expect<T>.toBeGreaterThan(expected: T)","kommander.toBeGreaterThan"]},{"name":"fun <T : Comparable<T>> Expect<T>.toBeGreaterThanOrEqualTo(expected: T)","description":"kommander.toBeGreaterThanOrEqualTo","location":"kommander-core/kommander/to-be-greater-than-or-equal-to.html","searchKeys":["toBeGreaterThanOrEqualTo","fun <T : Comparable<T>> Expect<T>.toBeGreaterThanOrEqualTo(expected: T)","kommander.toBeGreaterThanOrEqualTo"]},{"name":"fun <T : Comparable<T>> Expect<T>.toBeLessThan(expected: T)","description":"kommander.toBeLessThan","location":"kommander-core/kommander/to-be-less-than.html","searchKeys":["toBeLessThan","fun <T : Comparable<T>> Expect<T>.toBeLessThan(expected: T)","kommander.toBeLessThan"]},{"name":"fun <T : Comparable<T>> Expect<T>.toBeLessThanOrEqualTo(expected: T)","description":"kommander.toBeLessThanOrEqualTo","location":"kommander-core/kommander/to-be-less-than-or-equal-to.html","searchKeys":["toBeLessThanOrEqualTo","fun <T : Comparable<T>> Expect<T>.toBeLessThanOrEqualTo(expected: T)","kommander.toBeLessThanOrEqualTo"]},{"name":"fun <T> requireFromRootDir(path: String): T","description":"expect.requireFromRootDir","location":"kommander-core/expect/require-from-root-dir.html","searchKeys":["requireFromRootDir","fun <T> requireFromRootDir(path: String): T","expect.requireFromRootDir"]},{"name":"fun <T> requireFromRootDir(path: String): T","description":"kommander.requireFromRootDir","location":"kommander-core/kommander/require-from-root-dir.html","searchKeys":["requireFromRootDir","fun <T> requireFromRootDir(path: String): T","kommander.requireFromRootDir"]},{"name":"fun expectFunction(lambda: () -> Unit): ExpectLambda","description":"kommander.expectFunction","location":"kommander-core/kommander/expect-function.html","searchKeys":["expectFunction","fun expectFunction(lambda: () -> Unit): ExpectLambda","kommander.expectFunction"]},{"name":"fun expectFunction(lambda: () -> Unit): LambdaExpectation","description":"expect.expectFunction","location":"kommander-core/expect/expect-function.html","searchKeys":["expectFunction","fun expectFunction(lambda: () -> Unit): LambdaExpectation","expect.expectFunction"]},{"name":"fun expectFunction(lambda: Runnable): ExpectLambda","description":"kommander.ExpectBuilders.expectFunction","location":"kommander-core/kommander/-expect-builders/expect-function.html","searchKeys":["expectFunction","fun expectFunction(lambda: Runnable): ExpectLambda","kommander.ExpectBuilders.expectFunction"]},{"name":"fun expectFunction(lambda: Runnable): LambdaExpectation","description":"expect.ExpectBuilders.expectFunction","location":"kommander-core/expect/-expect-builders/expect-function.html","searchKeys":["expectFunction","fun expectFunction(lambda: Runnable): LambdaExpectation","expect.ExpectBuilders.expectFunction"]},{"name":"inline fun <E> BasicExpectation<Any?>.toBe(): E","description":"expect.toBe","location":"kommander-core/expect/to-be.html","searchKeys":["toBe","inline fun <E> BasicExpectation<Any?>.toBe(): E","expect.toBe"]},{"name":"inline fun <E> BasicExpectation<Any?>.toBeInstanceOf(message: String? = null): BasicExpectation<E>","description":"expect.toBeInstanceOf","location":"kommander-core/expect/to-be-instance-of.html","searchKeys":["toBeInstanceOf","inline fun <E> BasicExpectation<Any?>.toBeInstanceOf(message: String? = null): BasicExpectation<E>","expect.toBeInstanceOf"]},{"name":"inline fun <E> BasicExpectation<E>.toBeEqualTo(expected: E, message: String? = null)","description":"expect.toBeEqualTo","location":"kommander-core/expect/to-be-equal-to.html","searchKeys":["toBeEqualTo","inline fun <E> BasicExpectation<E>.toBeEqualTo(expected: E, message: String? = null)","expect.toBeEqualTo"]},{"name":"inline fun <E> Expect<Any?>.toBe(): E","description":"kommander.toBe","location":"kommander-core/kommander/to-be.html","searchKeys":["toBe","inline fun <E> Expect<Any?>.toBe(): E","kommander.toBe"]},{"name":"inline fun <E> Expect<Any?>.toBeInstanceOf(message: String? = null): Expect<E>","description":"kommander.toBeInstanceOf","location":"kommander-core/kommander/to-be-instance-of.html","searchKeys":["toBeInstanceOf","inline fun <E> Expect<Any?>.toBeInstanceOf(message: String? = null): Expect<E>","kommander.toBeInstanceOf"]},{"name":"inline fun <E> Expect<E>.toBeEqualTo(expected: E, message: String? = null)","description":"kommander.toBeEqualTo","location":"kommander-core/kommander/to-be-equal-to.html","searchKeys":["toBeEqualTo","inline fun <E> Expect<E>.toBeEqualTo(expected: E, message: String? = null)","kommander.toBeEqualTo"]},{"name":"inline fun <E> expect(value: E, builder: BasicExpectation<E>.() -> Unit): BasicExpectation<E>","description":"expect.expect","location":"kommander-core/expect/expect.html","searchKeys":["expect","inline fun <E> expect(value: E, builder: BasicExpectation<E>.() -> Unit): BasicExpectation<E>","expect.expect"]},{"name":"inline fun <E> expect(value: E, builder: Expect<E>.() -> Unit): Expect<E>","description":"kommander.expect","location":"kommander-core/kommander/expect.html","searchKeys":["expect","inline fun <E> expect(value: E, builder: Expect<E>.() -> Unit): Expect<E>","kommander.expect"]},{"name":"inline fun <E> expectMany(value: Collection<E>, builder: CollectionExpectation<E>.() -> Unit): CollectionExpectation<E>","description":"expect.expectMany","location":"kommander-core/expect/expect-many.html","searchKeys":["expectMany","inline fun <E> expectMany(value: Collection<E>, builder: CollectionExpectation<E>.() -> Unit): CollectionExpectation<E>","expect.expectMany"]},{"name":"inline fun <E> expectMany(value: Collection<E>, builder: ExpectCollection<E>.() -> Unit): ExpectCollection<E>","description":"kommander.expectMany","location":"kommander-core/kommander/expect-many.html","searchKeys":["expectMany","inline fun <E> expectMany(value: Collection<E>, builder: ExpectCollection<E>.() -> Unit): ExpectCollection<E>","kommander.expectMany"]},{"name":"inline fun <T : Throwable> ExpectLambda.toFailWith(): T","description":"kommander.toFailWith","location":"kommander-core/kommander/to-fail-with.html","searchKeys":["toFailWith","inline fun <T : Throwable> ExpectLambda.toFailWith(): T","kommander.toFailWith"]},{"name":"inline fun <T : Throwable> LambdaExpectation.toFailWith(): T","description":"expect.toFailWith","location":"kommander-core/expect/to-fail-with.html","searchKeys":["toFailWith","inline fun <T : Throwable> LambdaExpectation.toFailWith(): T","expect.toFailWith"]},{"name":"inline fun <T> BasicExpectation<T>.toBeUnequalTo(expected: T, message: String? = null)","description":"expect.toBeUnequalTo","location":"kommander-core/expect/to-be-unequal-to.html","searchKeys":["toBeUnequalTo","inline fun <T> BasicExpectation<T>.toBeUnequalTo(expected: T, message: String? = null)","expect.toBeUnequalTo"]},{"name":"inline fun <T> Expect<T>.toBeUnequalTo(expected: T, message: String? = null)","description":"kommander.toBeUnequalTo","location":"kommander-core/kommander/to-be-unequal-to.html","searchKeys":["toBeUnequalTo","inline fun <T> Expect<T>.toBeUnequalTo(expected: T, message: String? = null)","kommander.toBeUnequalTo"]},{"name":"inline fun BasicExpectation<String?>.toContain(other: String, ignoreCase: Boolean = true)","description":"expect.toContain","location":"kommander-core/expect/to-contain.html","searchKeys":["toContain","inline fun BasicExpectation<String?>.toContain(other: String, ignoreCase: Boolean = true)","expect.toContain"]},{"name":"inline fun Expect<String?>.toContain(other: String, ignoreCase: Boolean = true, message: String? = null)","description":"kommander.toContain","location":"kommander-core/kommander/to-contain.html","searchKeys":["toContain","inline fun Expect<String?>.toContain(other: String, ignoreCase: Boolean = true, message: String? = null)","kommander.toContain"]},{"name":"interface CollectionExpectation<out E> : BasicExpectation<Collection<E>?> ","description":"expect.CollectionExpectation","location":"kommander-core/expect/-collection-expectation/index.html","searchKeys":["CollectionExpectation","interface CollectionExpectation<out E> : BasicExpectation<Collection<E>?> ","expect.CollectionExpectation"]},{"name":"interface ExpectCollection<out E> : Expect<Collection<E>?> ","description":"kommander.ExpectCollection","location":"kommander-core/kommander/-expect-collection/index.html","searchKeys":["ExpectCollection","interface ExpectCollection<out E> : Expect<Collection<E>?> ","kommander.ExpectCollection"]},{"name":"interface ExpectLambda : Expect<() -> Unit> ","description":"kommander.ExpectLambda","location":"kommander-core/kommander/-expect-lambda/index.html","searchKeys":["ExpectLambda","interface ExpectLambda : Expect<() -> Unit> ","kommander.ExpectLambda"]},{"name":"interface LambdaExpectation : BasicExpectation<() -> Unit> ","description":"expect.LambdaExpectation","location":"kommander-core/expect/-lambda-expectation/index.html","searchKeys":["LambdaExpectation","interface LambdaExpectation : BasicExpectation<() -> Unit> ","expect.LambdaExpectation"]},{"name":"object ExpectBuilders","description":"expect.ExpectBuilders","location":"kommander-core/expect/-expect-builders/index.html","searchKeys":["ExpectBuilders","object ExpectBuilders","expect.ExpectBuilders"]},{"name":"object ExpectBuilders","description":"kommander.ExpectBuilders","location":"kommander-core/kommander/-expect-builders/index.html","searchKeys":["ExpectBuilders","object ExpectBuilders","kommander.ExpectBuilders"]},{"name":"open fun toBeInstanceOf(clazz: Class<out Any?>)","description":"expect.BasicExpectation.toBeInstanceOf","location":"kommander-core/expect/-basic-expectation/to-be-instance-of.html","searchKeys":["toBeInstanceOf","open fun toBeInstanceOf(clazz: Class<out Any?>)","expect.BasicExpectation.toBeInstanceOf"]},{"name":"open fun toBeInstanceOf(clazz: Class<out Any?>)","description":"kommander.Expect.toBeInstanceOf","location":"kommander-core/kommander/-expect/to-be-instance-of.html","searchKeys":["toBeInstanceOf","open fun toBeInstanceOf(clazz: Class<out Any?>)","kommander.Expect.toBeInstanceOf"]},{"name":"open override fun toBe(expected: E)","description":"expect.internal.BasicExpectationImpl.toBe","location":"kommander-core/expect.internal/-basic-expectation-impl/to-be.html","searchKeys":["toBe","open override fun toBe(expected: E)","expect.internal.BasicExpectationImpl.toBe"]},{"name":"open override fun toBe(expected: E)","description":"kommander.internal.ExpectImpl.toBe","location":"kommander-core/kommander.internal/-expect-impl/to-be.html","searchKeys":["toBe","open override fun toBe(expected: E)","kommander.internal.ExpectImpl.toBe"]},{"name":"open override fun toBe(expected: E, message: String)","description":"expect.internal.BasicExpectationImpl.toBe","location":"kommander-core/expect.internal/-basic-expectation-impl/to-be.html","searchKeys":["toBe","open override fun toBe(expected: E, message: String)","expect.internal.BasicExpectationImpl.toBe"]},{"name":"open override fun toBe(expected: E, message: String)","description":"kommander.internal.ExpectImpl.toBe","location":"kommander-core/kommander.internal/-expect-impl/to-be.html","searchKeys":["toBe","open override fun toBe(expected: E, message: String)","kommander.internal.ExpectImpl.toBe"]},{"name":"open override fun toBeNonNull()","description":"expect.internal.BasicExpectationImpl.toBeNonNull","location":"kommander-core/expect.internal/-basic-expectation-impl/to-be-non-null.html","searchKeys":["toBeNonNull","open override fun toBeNonNull()","expect.internal.BasicExpectationImpl.toBeNonNull"]},{"name":"open override fun toBeNonNull()","description":"kommander.internal.ExpectImpl.toBeNonNull","location":"kommander-core/kommander.internal/-expect-impl/to-be-non-null.html","searchKeys":["toBeNonNull","open override fun toBeNonNull()","kommander.internal.ExpectImpl.toBeNonNull"]},{"name":"open override fun toBeNonNull(message: String)","description":"expect.internal.BasicExpectationImpl.toBeNonNull","location":"kommander-core/expect.internal/-basic-expectation-impl/to-be-non-null.html","searchKeys":["toBeNonNull","open override fun toBeNonNull(message: String)","expect.internal.BasicExpectationImpl.toBeNonNull"]},{"name":"open override fun toBeNonNull(message: String)","description":"kommander.internal.ExpectImpl.toBeNonNull","location":"kommander-core/kommander.internal/-expect-impl/to-be-non-null.html","searchKeys":["toBeNonNull","open override fun toBeNonNull(message: String)","kommander.internal.ExpectImpl.toBeNonNull"]},{"name":"open override fun toBeNull()","description":"expect.internal.BasicExpectationImpl.toBeNull","location":"kommander-core/expect.internal/-basic-expectation-impl/to-be-null.html","searchKeys":["toBeNull","open override fun toBeNull()","expect.internal.BasicExpectationImpl.toBeNull"]},{"name":"open override fun toBeNull()","description":"kommander.internal.ExpectImpl.toBeNull","location":"kommander-core/kommander.internal/-expect-impl/to-be-null.html","searchKeys":["toBeNull","open override fun toBeNull()","kommander.internal.ExpectImpl.toBeNull"]},{"name":"open override fun toBeNull(message: String)","description":"expect.internal.BasicExpectationImpl.toBeNull","location":"kommander-core/expect.internal/-basic-expectation-impl/to-be-null.html","searchKeys":["toBeNull","open override fun toBeNull(message: String)","expect.internal.BasicExpectationImpl.toBeNull"]},{"name":"open override fun toBeNull(message: String)","description":"kommander.internal.ExpectImpl.toBeNull","location":"kommander-core/kommander.internal/-expect-impl/to-be-null.html","searchKeys":["toBeNull","open override fun toBeNull(message: String)","kommander.internal.ExpectImpl.toBeNull"]},{"name":"open override val value: E","description":"expect.internal.BasicExpectationImpl.value","location":"kommander-core/expect.internal/-basic-expectation-impl/value.html","searchKeys":["value","open override val value: E","expect.internal.BasicExpectationImpl.value"]},{"name":"open override val value: E","description":"kommander.internal.ExpectImpl.value","location":"kommander-core/kommander.internal/-expect-impl/value.html","searchKeys":["value","open override val value: E","kommander.internal.ExpectImpl.value"]},{"name":"class ConsoleAppenderOptions(val level: LogLevel = LogLevel.DEBUG, val verbose: Boolean = true)","description":"lexi.ConsoleAppenderOptions","location":"lexi-console/lexi/-console-appender-options/index.html","searchKeys":["ConsoleAppenderOptions","class ConsoleAppenderOptions(val level: LogLevel = LogLevel.DEBUG, val verbose: Boolean = true)","lexi.ConsoleAppenderOptions"]},{"name":"class ConsoleAppenderOptions(val level: LogLevel = LogLevel.DEBUG, val verbose: Boolean = true)","description":"logging.ConsoleAppenderOptions","location":"lexi-console/logging/-console-appender-options/index.html","searchKeys":["ConsoleAppenderOptions","class ConsoleAppenderOptions(val level: LogLevel = LogLevel.DEBUG, val verbose: Boolean = true)","logging.ConsoleAppenderOptions"]},{"name":"constructor(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true)","description":"lexi.ConsoleAppenderOptions.ConsoleAppenderOptions","location":"lexi-console/lexi/-console-appender-options/-console-appender-options.html","searchKeys":["ConsoleAppenderOptions","constructor(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true)","lexi.ConsoleAppenderOptions.ConsoleAppenderOptions"]},{"name":"constructor(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true)","description":"logging.ConsoleAppenderOptions.ConsoleAppenderOptions","location":"lexi-console/logging/-console-appender-options/-console-appender-options.html","searchKeys":["ConsoleAppenderOptions","constructor(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true)","logging.ConsoleAppenderOptions.ConsoleAppenderOptions"]},{"name":"expect class ConsoleAppender(options: ConsoleAppenderOptions) : Appender","description":"lexi.ConsoleAppender","location":"lexi-console/lexi/-console-appender/index.html","searchKeys":["ConsoleAppender","expect class ConsoleAppender(options: ConsoleAppenderOptions) : Appender","lexi.ConsoleAppender"]},{"name":"expect class ConsoleAppender(options: ConsoleAppenderOptions) : Appender","description":"logging.ConsoleAppender","location":"lexi-console/logging/-console-appender/index.html","searchKeys":["ConsoleAppender","expect class ConsoleAppender(options: ConsoleAppenderOptions) : Appender","logging.ConsoleAppender"]},{"name":"expect constructor(options: ConsoleAppenderOptions)","description":"lexi.ConsoleAppender.ConsoleAppender","location":"lexi-console/lexi/-console-appender/-console-appender.html","searchKeys":["ConsoleAppender","expect constructor(options: ConsoleAppenderOptions)","lexi.ConsoleAppender.ConsoleAppender"]},{"name":"expect constructor(options: ConsoleAppenderOptions)","description":"logging.ConsoleAppender.ConsoleAppender","location":"lexi-console/logging/-console-appender/-console-appender.html","searchKeys":["ConsoleAppender","expect constructor(options: ConsoleAppenderOptions)","logging.ConsoleAppender.ConsoleAppender"]},{"name":"expect val err: PrintStream","description":"lexi.err","location":"lexi-console/lexi/err.html","searchKeys":["err","expect val err: PrintStream","lexi.err"]},{"name":"expect val out: PrintStream","description":"lexi.out","location":"lexi-console/lexi/--out--.html","searchKeys":["out","expect val out: PrintStream","lexi.out"]},{"name":"fun ConsoleAppender(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true): ConsoleAppender","description":"lexi.ConsoleAppender","location":"lexi-console/lexi/-console-appender.html","searchKeys":["ConsoleAppender","fun ConsoleAppender(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true): ConsoleAppender","lexi.ConsoleAppender"]},{"name":"fun ConsoleAppender(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true): ConsoleAppender","description":"logging.ConsoleAppender","location":"lexi-console/logging/-console-appender.html","searchKeys":["ConsoleAppender","fun ConsoleAppender(level: LogLevel = LogLevel.DEBUG, verbose: Boolean = true): ConsoleAppender","logging.ConsoleAppender"]},{"name":"fun table(obj: Any): Any","description":"lexi.ConsoleAppender.table","location":"lexi-console/lexi/-console-appender/table.html","searchKeys":["table","fun table(obj: Any): Any","lexi.ConsoleAppender.table"]},{"name":"fun table(obj: Any): Any","description":"logging.ConsoleAppender.table","location":"lexi-console/logging/-console-appender/table.html","searchKeys":["table","fun table(obj: Any): Any","logging.ConsoleAppender.table"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[android]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[js]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[jvm]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[other]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[android]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","logging.ConsoleAppender.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[js]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","logging.ConsoleAppender.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[jvm]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","logging.ConsoleAppender.append"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[other]append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","logging.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[android]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[js]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[jvm]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"lexi.ConsoleAppender.append","location":"lexi-console/lexi/-console-appender/[other]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","lexi.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[android]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","logging.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[js]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","logging.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[jvm]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","logging.ConsoleAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"logging.ConsoleAppender.append","location":"lexi-console/logging/-console-appender/[other]append.html","searchKeys":["append","open override fun append(vararg o: Any?)","logging.ConsoleAppender.append"]},{"name":"open override fun dir(o: Any)","description":"lexi.ConsoleAppender.dir","location":"lexi-console/lexi/-console-appender/dir.html","searchKeys":["dir","open override fun dir(o: Any)","lexi.ConsoleAppender.dir"]},{"name":"open override fun dir(o: Any)","description":"logging.ConsoleAppender.dir","location":"lexi-console/logging/-console-appender/dir.html","searchKeys":["dir","open override fun dir(o: Any)","logging.ConsoleAppender.dir"]},{"name":"open override fun error(vararg o: Any?)","description":"lexi.ConsoleAppender.error","location":"lexi-console/lexi/-console-appender/error.html","searchKeys":["error","open override fun error(vararg o: Any?)","lexi.ConsoleAppender.error"]},{"name":"open override fun error(vararg o: Any?)","description":"logging.ConsoleAppender.error","location":"lexi-console/logging/-console-appender/error.html","searchKeys":["error","open override fun error(vararg o: Any?)","logging.ConsoleAppender.error"]},{"name":"open override fun info(vararg o: Any?)","description":"lexi.ConsoleAppender.info","location":"lexi-console/lexi/-console-appender/info.html","searchKeys":["info","open override fun info(vararg o: Any?)","lexi.ConsoleAppender.info"]},{"name":"open override fun info(vararg o: Any?)","description":"logging.ConsoleAppender.info","location":"lexi-console/logging/-console-appender/info.html","searchKeys":["info","open override fun info(vararg o: Any?)","logging.ConsoleAppender.info"]},{"name":"open override fun log(vararg o: Any?)","description":"lexi.ConsoleAppender.log","location":"lexi-console/lexi/-console-appender/log.html","searchKeys":["log","open override fun log(vararg o: Any?)","lexi.ConsoleAppender.log"]},{"name":"open override fun log(vararg o: Any?)","description":"logging.ConsoleAppender.log","location":"lexi-console/logging/-console-appender/log.html","searchKeys":["log","open override fun log(vararg o: Any?)","logging.ConsoleAppender.log"]},{"name":"open override fun warn(vararg o: Any?)","description":"lexi.ConsoleAppender.warn","location":"lexi-console/lexi/-console-appender/warn.html","searchKeys":["warn","open override fun warn(vararg o: Any?)","lexi.ConsoleAppender.warn"]},{"name":"open override fun warn(vararg o: Any?)","description":"logging.ConsoleAppender.warn","location":"lexi-console/logging/-console-appender/warn.html","searchKeys":["warn","open override fun warn(vararg o: Any?)","logging.ConsoleAppender.warn"]},{"name":"val console: ConsoleAppender","description":"lexi.console","location":"lexi-console/lexi/console.html","searchKeys":["console","val console: ConsoleAppender","lexi.console"]},{"name":"val console: ConsoleAppender","description":"logging.console","location":"lexi-console/logging/console.html","searchKeys":["console","val console: ConsoleAppender","logging.console"]},{"name":"val level: LogLevel","description":"lexi.ConsoleAppenderOptions.level","location":"lexi-console/lexi/-console-appender-options/level.html","searchKeys":["level","val level: LogLevel","lexi.ConsoleAppenderOptions.level"]},{"name":"val level: LogLevel","description":"logging.ConsoleAppenderOptions.level","location":"lexi-console/logging/-console-appender-options/level.html","searchKeys":["level","val level: LogLevel","logging.ConsoleAppenderOptions.level"]},{"name":"val verbose: Boolean = true","description":"lexi.ConsoleAppenderOptions.verbose","location":"lexi-console/lexi/-console-appender-options/verbose.html","searchKeys":["verbose","val verbose: Boolean = true","lexi.ConsoleAppenderOptions.verbose"]},{"name":"val verbose: Boolean = true","description":"logging.ConsoleAppenderOptions.verbose","location":"lexi-console/logging/-console-appender-options/verbose.html","searchKeys":["verbose","val verbose: Boolean = true","logging.ConsoleAppenderOptions.verbose"]},{"name":"var options: ConsoleAppenderOptions","description":"lexi.ConsoleAppender.options","location":"lexi-console/lexi/-console-appender/[android]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","lexi.ConsoleAppender.options"]},{"name":"var options: ConsoleAppenderOptions","description":"lexi.ConsoleAppender.options","location":"lexi-console/lexi/-console-appender/[js]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","lexi.ConsoleAppender.options"]},{"name":"var options: ConsoleAppenderOptions","description":"lexi.ConsoleAppender.options","location":"lexi-console/lexi/-console-appender/[jvm]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","lexi.ConsoleAppender.options"]},{"name":"var options: ConsoleAppenderOptions","description":"lexi.ConsoleAppender.options","location":"lexi-console/lexi/-console-appender/[other]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","lexi.ConsoleAppender.options"]},{"name":"var options: ConsoleAppenderOptions","description":"logging.ConsoleAppender.options","location":"lexi-console/logging/-console-appender/[android]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","logging.ConsoleAppender.options"]},{"name":"var options: ConsoleAppenderOptions","description":"logging.ConsoleAppender.options","location":"lexi-console/logging/-console-appender/[js]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","logging.ConsoleAppender.options"]},{"name":"var options: ConsoleAppenderOptions","description":"logging.ConsoleAppender.options","location":"lexi-console/logging/-console-appender/[jvm]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","logging.ConsoleAppender.options"]},{"name":"var options: ConsoleAppenderOptions","description":"logging.ConsoleAppender.options","location":"lexi-console/logging/-console-appender/[other]options.html","searchKeys":["options","var options: ConsoleAppenderOptions","logging.ConsoleAppender.options"]},{"name":"fun expectLambda(lambda: suspend () -> Unit): SuspendLambdaExpectation","description":"expect.expectLambda","location":"kommander-coroutines/expect/expect-lambda.html","searchKeys":["expectLambda","fun expectLambda(lambda: suspend () -> Unit): SuspendLambdaExpectation","expect.expectLambda"]},{"name":"fun expectLambda(lambda: suspend () -> Unit): SuspendLambdaExpectation","description":"kommander.expectLambda","location":"kommander-coroutines/kommander/expect-lambda.html","searchKeys":["expectLambda","fun expectLambda(lambda: suspend () -> Unit): SuspendLambdaExpectation","kommander.expectLambda"]},{"name":"inline suspend fun <T : Throwable> SuspendLambdaExpectation.toFailWith(): T","description":"expect.toFailWith","location":"kommander-coroutines/expect/to-fail-with.html","searchKeys":["toFailWith","inline suspend fun <T : Throwable> SuspendLambdaExpectation.toFailWith(): T","expect.toFailWith"]},{"name":"inline suspend fun <T : Throwable> SuspendLambdaExpectation.toFailWith(): T","description":"kommander.toFailWith","location":"kommander-coroutines/kommander/to-fail-with.html","searchKeys":["toFailWith","inline suspend fun <T : Throwable> SuspendLambdaExpectation.toFailWith(): T","kommander.toFailWith"]},{"name":"inline suspend fun <T : Throwable> expectFailureWith(noinline lambda: () -> Unit): T","description":"expect.expectFailureWith","location":"kommander-coroutines/expect/expect-failure-with.html","searchKeys":["expectFailureWith","inline suspend fun <T : Throwable> expectFailureWith(noinline lambda: () -> Unit): T","expect.expectFailureWith"]},{"name":"inline suspend fun <T : Throwable> expectFailureWith(noinline lambda: () -> Unit): T","description":"kommander.expectFailureWith","location":"kommander-coroutines/kommander/expect-failure-with.html","searchKeys":["expectFailureWith","inline suspend fun <T : Throwable> expectFailureWith(noinline lambda: () -> Unit): T","kommander.expectFailureWith"]},{"name":"interface SuspendLambdaExpectation : BasicExpectation<suspend () -> Unit> ","description":"expect.SuspendLambdaExpectation","location":"kommander-coroutines/expect/-suspend-lambda-expectation/index.html","searchKeys":["SuspendLambdaExpectation","interface SuspendLambdaExpectation : BasicExpectation<suspend () -> Unit> ","expect.SuspendLambdaExpectation"]},{"name":"interface SuspendLambdaExpectation : Expect<suspend () -> Unit> ","description":"kommander.SuspendLambdaExpectation","location":"kommander-coroutines/kommander/-suspend-lambda-expectation/index.html","searchKeys":["SuspendLambdaExpectation","interface SuspendLambdaExpectation : Expect<suspend () -> Unit> ","kommander.SuspendLambdaExpectation"]},{"name":"open suspend fun toFail(): Throwable","description":"expect.SuspendLambdaExpectation.toFail","location":"kommander-coroutines/expect/-suspend-lambda-expectation/to-fail.html","searchKeys":["toFail","open suspend fun toFail(): Throwable","expect.SuspendLambdaExpectation.toFail"]},{"name":"open suspend fun toFail(): Throwable","description":"kommander.SuspendLambdaExpectation.toFail","location":"kommander-coroutines/kommander/-suspend-lambda-expectation/to-fail.html","searchKeys":["toFail","open suspend fun toFail(): Throwable","kommander.SuspendLambdaExpectation.toFail"]},{"name":"open suspend fun toPass()","description":"expect.SuspendLambdaExpectation.toPass","location":"kommander-coroutines/expect/-suspend-lambda-expectation/to-pass.html","searchKeys":["toPass","open suspend fun toPass()","expect.SuspendLambdaExpectation.toPass"]},{"name":"open suspend fun toPass()","description":"kommander.SuspendLambdaExpectation.toPass","location":"kommander-coroutines/kommander/-suspend-lambda-expectation/to-pass.html","searchKeys":["toPass","open suspend fun toPass()","kommander.SuspendLambdaExpectation.toPass"]},{"name":"suspend fun expectFailure(lambda: suspend () -> Unit): Throwable","description":"expect.expectFailure","location":"kommander-coroutines/expect/expect-failure.html","searchKeys":["expectFailure","suspend fun expectFailure(lambda: suspend () -> Unit): Throwable","expect.expectFailure"]},{"name":"suspend fun expectFailure(lambda: suspend () -> Unit): Throwable","description":"kommander.expectFailure","location":"kommander-coroutines/kommander/expect-failure.html","searchKeys":["expectFailure","suspend fun expectFailure(lambda: suspend () -> Unit): Throwable","kommander.expectFailure"]},{"name":"class FileAppender(var options: FileAppenderOptions) : Appender","description":"logging.FileAppender","location":"lexi-file/logging/-file-appender/index.html","searchKeys":["FileAppender","class FileAppender(var options: FileAppenderOptions) : Appender","logging.FileAppender"]},{"name":"class FileAppenderOptions(val rootDir: File, val level: LogLevel = LogLevel.DEBUG)","description":"logging.FileAppenderOptions","location":"lexi-file/logging/-file-appender-options/index.html","searchKeys":["FileAppenderOptions","class FileAppenderOptions(val rootDir: File, val level: LogLevel = LogLevel.DEBUG)","logging.FileAppenderOptions"]},{"name":"constructor(options: FileAppenderOptions)","description":"logging.FileAppender.FileAppender","location":"lexi-file/logging/-file-appender/-file-appender.html","searchKeys":["FileAppender","constructor(options: FileAppenderOptions)","logging.FileAppender.FileAppender"]},{"name":"constructor(rootDir: File, level: LogLevel = LogLevel.DEBUG)","description":"logging.FileAppenderOptions.FileAppenderOptions","location":"lexi-file/logging/-file-appender-options/-file-appender-options.html","searchKeys":["FileAppenderOptions","constructor(rootDir: File, level: LogLevel = LogLevel.DEBUG)","logging.FileAppenderOptions.FileAppenderOptions"]},{"name":"open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","description":"logging.FileAppender.append","location":"lexi-file/logging/-file-appender/append.html","searchKeys":["append","open override fun append(level: LogLevel, msg: String, vararg data: Pair<String, Any?>)","logging.FileAppender.append"]},{"name":"open override fun append(vararg o: Any?)","description":"logging.FileAppender.append","location":"lexi-file/logging/-file-appender/append.html","searchKeys":["append","open override fun append(vararg o: Any?)","logging.FileAppender.append"]},{"name":"val level: LogLevel","description":"logging.FileAppenderOptions.level","location":"lexi-file/logging/-file-appender-options/level.html","searchKeys":["level","val level: LogLevel","logging.FileAppenderOptions.level"]},{"name":"val rootDir: File","description":"logging.FileAppenderOptions.rootDir","location":"lexi-file/logging/-file-appender-options/root-dir.html","searchKeys":["rootDir","val rootDir: File","logging.FileAppenderOptions.rootDir"]},{"name":"var options: FileAppenderOptions","description":"logging.FileAppender.options","location":"lexi-file/logging/-file-appender/options.html","searchKeys":["options","var options: FileAppenderOptions","logging.FileAppender.options"]}]